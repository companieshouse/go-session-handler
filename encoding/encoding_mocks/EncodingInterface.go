// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"

// EncodingInterface is an autogenerated mock type for the EncodingInterface type
type EncodingInterface struct {
	mock.Mock
}

// DecodeBase64 provides a mock function with given fields: base64Encoded
func (_m *EncodingInterface) DecodeBase64(base64Encoded string) ([]byte, error) {
	ret := _m.Called(base64Encoded)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(base64Encoded)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(base64Encoded)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecodeMsgPack provides a mock function with given fields: msgpackEncoded
func (_m *EncodingInterface) DecodeMsgPack(msgpackEncoded []byte) (map[string]interface{}, error) {
	ret := _m.Called(msgpackEncoded)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func([]byte) map[string]interface{}); ok {
		r0 = rf(msgpackEncoded)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(msgpackEncoded)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncodeBase64 provides a mock function with given fields: bytes
func (_m *EncodingInterface) EncodeBase64(bytes []byte) string {
	ret := _m.Called(bytes)

	var r0 string
	if rf, ok := ret.Get(0).(func([]byte) string); ok {
		r0 = rf(bytes)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EncodeMsgPack provides a mock function with given fields: data
func (_m *EncodingInterface) EncodeMsgPack(data map[string]interface{}) ([]byte, error) {
	ret := _m.Called(data)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []byte); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateSha1Sum provides a mock function with given fields: sum
func (_m *EncodingInterface) GenerateSha1Sum(sum []byte) [20]byte {
	ret := _m.Called(sum)

	var r0 [20]byte
	if rf, ok := ret.Get(0).(func([]byte) [20]byte); ok {
		r0 = rf(sum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([20]byte)
		}
	}

	return r0
}

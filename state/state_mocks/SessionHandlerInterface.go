// Code generated by mockery v1.0.0
package mocks

import http "net/http"
import mock "github.com/stretchr/testify/mock"

// SessionHandlerInterface is an autogenerated mock type for the SessionHandlerInterface type
type SessionHandlerInterface struct {
	mock.Mock
}

// Clear provides a mock function with given fields: req
func (_m *SessionHandlerInterface) Clear(req *http.Request) {
	_m.Called(req)
}

// DecodeSession provides a mock function with given fields: req, session
func (_m *SessionHandlerInterface) DecodeSession(req *http.Request, session string) (map[string]interface{}, error) {
	ret := _m.Called(req, session)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(*http.Request, string) map[string]interface{}); ok {
		r0 = rf(req, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request, string) error); ok {
		r1 = rf(req, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncodeSessionData provides a mock function with given fields:
func (_m *SessionHandlerInterface) EncodeSessionData() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtractAndValidateCookieSignatureParts provides a mock function with given fields: req, cookieSignature
func (_m *SessionHandlerInterface) ExtractAndValidateCookieSignatureParts(req *http.Request, cookieSignature string) {
	_m.Called(req, cookieSignature)
}

// GetStoredSession provides a mock function with given fields: req
func (_m *SessionHandlerInterface) GetStoredSession(req *http.Request) (string, error) {
	ret := _m.Called(req)

	var r0 string
	if rf, ok := ret.Get(0).(func(*http.Request) string); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitCache provides a mock function with given fields:
func (_m *SessionHandlerInterface) InitCache() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegenerateID provides a mock function with given fields:
func (_m *SessionHandlerInterface) RegenerateID() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetSession provides a mock function with given fields: encodedData
func (_m *SessionHandlerInterface) SetSession(encodedData string) error {
	ret := _m.Called(encodedData)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(encodedData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupExpiration provides a mock function with given fields:
func (_m *SessionHandlerInterface) SetupExpiration() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateCookieSignature provides a mock function with given fields: req, cookieSignature
func (_m *SessionHandlerInterface) ValidateCookieSignature(req *http.Request, cookieSignature string) error {
	ret := _m.Called(req, cookieSignature)

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Request, string) error); ok {
		r0 = rf(req, cookieSignature)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateExpiration provides a mock function with given fields: req
func (_m *SessionHandlerInterface) ValidateExpiration(req *http.Request) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Request) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateSession provides a mock function with given fields:
func (_m *SessionHandlerInterface) ValidateSession() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
